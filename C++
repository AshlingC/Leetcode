class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> indices;
        if (words.empty() || s.empty()) return indices;

        unordered_map<string, int> wordCount;
        for (auto &word : words) ++wordCount[word];

        int wordLength = words[0].size();
        int substringLength = wordLength * words.size();
        
        for (int i = 0; i < wordLength; ++i) {
            int left = i, count = 0;
            unordered_map<string, int> seenWords;
            
            for (int j = i; j <= int(s.size()) - wordLength; j += wordLength) {
                string currentWord = s.substr(j, wordLength);
                
                if (wordCount.count(currentWord)) {
                    ++seenWords[currentWord];
                    ++count;
                    
                    while (seenWords[currentWord] > wordCount[currentWord]) {
                        string leftWord = s.substr(left, wordLength);
                        --seenWords[leftWord];
                        --count;
                        left += wordLength;
                    }
                    
                    if (count == int(words.size())) {
                        indices.push_back(left);
                    }
                } else {
                    seenWords.clear();
                    count = 0;
                    left = j + wordLength;
                }
            }
        }
        
        return indices;
    }
};
